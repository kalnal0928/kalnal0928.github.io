<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>테트리스</title>
    <style>
        body {
            margin: 0;
            padding: 0;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            font-family: 'Arial', sans-serif;
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
            color: white;
        }

        .game-container {
            display: flex;
            gap: 30px;
            align-items: flex-start;
            background: rgba(0, 0, 0, 0.3);
            padding: 30px;
            border-radius: 20px;
            backdrop-filter: blur(10px);
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.3);
        }

        .game-board {
            position: relative;
        }

        canvas {
            border: 4px solid #fff;
            border-radius: 10px;
            background: #000;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.5);
        }

        .game-info {
            display: flex;
            flex-direction: column;
            gap: 20px;
            min-width: 200px;
        }

        .info-panel {
            background: rgba(255, 255, 255, 0.1);
            padding: 20px;
            border-radius: 15px;
            border: 1px solid rgba(255, 255, 255, 0.2);
        }

        .info-panel h3 {
            margin: 0 0 10px 0;
            font-size: 18px;
            color: #fff;
            text-shadow: 0 2px 4px rgba(0, 0, 0, 0.5);
        }

        .score, .level, .lines {
            font-size: 24px;
            font-weight: bold;
            color: #00ff88;
            text-shadow: 0 2px 4px rgba(0, 255, 136, 0.3);
        }

        .next-piece {
            width: 120px;
            height: 120px;
            background: #000;
            border: 2px solid #fff;
            border-radius: 10px;
            margin: 10px 0;
        }

        .controls {
            background: rgba(255, 255, 255, 0.1);
            padding: 20px;
            border-radius: 15px;
            border: 1px solid rgba(255, 255, 255, 0.2);
            font-size: 14px;
            line-height: 1.6;
        }

        .controls h3 {
            margin: 0 0 15px 0;
            font-size: 18px;
        }

        .control-item {
            display: flex;
            justify-content: space-between;
            margin: 8px 0;
        }

        .key {
            background: rgba(255, 255, 255, 0.2);
            padding: 4px 8px;
            border-radius: 5px;
            font-family: monospace;
            font-weight: bold;
        }

        .game-over {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: rgba(0, 0, 0, 0.9);
            color: white;
            padding: 40px;
            border-radius: 20px;
            text-align: center;
            font-size: 24px;
            font-weight: bold;
            border: 3px solid #ff4444;
            display: none;
        }

        .game-over button {
            background: #00ff88;
            color: #000;
            border: none;
            padding: 15px 30px;
            font-size: 18px;
            font-weight: bold;
            border-radius: 10px;
            cursor: pointer;
            margin-top: 20px;
            transition: all 0.3s ease;
        }

        .game-over button:hover {
            background: #00dd77;
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(0, 255, 136, 0.3);
        }

        .pause-overlay {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.8);
            display: flex;
            justify-content: center;
            align-items: center;
            font-size: 48px;
            font-weight: bold;
            color: #00ff88;
            text-shadow: 0 4px 8px rgba(0, 255, 136, 0.5);
            display: none;
        }

        @media (max-width: 768px) {
            .game-container {
                flex-direction: column;
                padding: 20px;
            }
            
            .game-info {
                min-width: auto;
                width: 100%;
            }
            
            .controls {
                font-size: 12px;
            }
        }
    </style>
</head>
<body>
    <div class="game-container">
        <div class="game-board">
            <canvas id="gameCanvas" width="300" height="600"></canvas>
            <div class="game-over" id="gameOver">
                <div>게임 오버!</div>
                <div style="font-size: 16px; margin: 10px 0;">최종 점수: <span id="finalScore">0</span></div>
                <button onclick="restartGame()">다시 시작</button>
            </div>
            <div class="pause-overlay" id="pauseOverlay">일시정지</div>
        </div>
        
        <div class="game-info">
            <div class="info-panel">
                <h3>점수</h3>
                <div class="score" id="score">0</div>
            </div>
            
            <div class="info-panel">
                <h3>레벨</h3>
                <div class="level" id="level">1</div>
            </div>
            
            <div class="info-panel">
                <h3>라인</h3>
                <div class="lines" id="lines">0</div>
            </div>
            
            <div class="info-panel">
                <h3>다음 블록</h3>
                <canvas class="next-piece" id="nextCanvas" width="120" height="120"></canvas>
            </div>
            
            <div class="controls">
                <h3>조작법</h3>
                <div class="control-item">
                    <span>좌/우 이동</span>
                    <span class="key">← →</span>
                </div>
                <div class="control-item">
                    <span>아래로</span>
                    <span class="key">↓</span>
                </div>
                <div class="control-item">
                    <span>회전</span>
                    <span class="key">↑</span>
                </div>
                <div class="control-item">
                    <span>즉시 떨어뜨리기</span>
                    <span class="key">Space</span>
                </div>
                <div class="control-item">
                    <span>일시정지</span>
                    <span class="key">P</span>
                </div>
            </div>
        </div>
    </div>

    <script>
        const canvas = document.getElementById('gameCanvas');
        const ctx = canvas.getContext('2d');
        const nextCanvas = document.getElementById('nextCanvas');
        const nextCtx = nextCanvas.getContext('2d');

        const BOARD_WIDTH = 10;
        const BOARD_HEIGHT = 20;
        const BLOCK_SIZE = 30;

        let board = [];
        let currentPiece = null;
        let nextPiece = null;
        let score = 0;
        let level = 1;
        let lines = 0;
        let gameRunning = true;
        let isPaused = false;
        let dropTime = 0;
        let dropInterval = 1000;

        // 테트리스 블록 정의
        const PIECES = {
            I: {
                shape: [
                    [1, 1, 1, 1]
                ],
                color: '#00ffff'
            },
            O: {
                shape: [
                    [1, 1],
                    [1, 1]
                ],
                color: '#ffff00'
            },
            T: {
                shape: [
                    [0, 1, 0],
                    [1, 1, 1]
                ],
                color: '#aa00ff'
            },
            S: {
                shape: [
                    [0, 1, 1],
                    [1, 1, 0]
                ],
                color: '#00ff00'
            },
            Z: {
                shape: [
                    [1, 1, 0],
                    [0, 1, 1]
                ],
                color: '#ff0000'
            },
            J: {
                shape: [
                    [1, 0, 0],
                    [1, 1, 1]
                ],
                color: '#0000ff'
            },
            L: {
                shape: [
                    [0, 0, 1],
                    [1, 1, 1]
                ],
                color: '#ff7f00'
            }
        };

        // 게임 보드 초기화
        function initBoard() {
            board = [];
            for (let y = 0; y < BOARD_HEIGHT; y++) {
                board[y] = [];
                for (let x = 0; x < BOARD_WIDTH; x++) {
                    board[y][x] = 0;
                }
            }
        }

        // 랜덤 블록 생성
        function createPiece() {
            const pieces = Object.keys(PIECES);
            const randomPiece = pieces[Math.floor(Math.random() * pieces.length)];
            return {
                shape: PIECES[randomPiece].shape,
                color: PIECES[randomPiece].color,
                x: Math.floor(BOARD_WIDTH / 2) - Math.floor(PIECES[randomPiece].shape[0].length / 2),
                y: 0
            };
        }

        // 블록 그리기
        function drawBlock(ctx, x, y, color) {
            ctx.fillStyle = color;
            ctx.fillRect(x * BLOCK_SIZE, y * BLOCK_SIZE, BLOCK_SIZE, BLOCK_SIZE);
            ctx.strokeStyle = '#333';
            ctx.strokeRect(x * BLOCK_SIZE, y * BLOCK_SIZE, BLOCK_SIZE, BLOCK_SIZE);
        }

        // 보드 그리기
        function drawBoard() {
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            
            // 보드의 블록들 그리기
            for (let y = 0; y < BOARD_HEIGHT; y++) {
                for (let x = 0; x < BOARD_WIDTH; x++) {
                    if (board[y][x]) {
                        drawBlock(ctx, x, y, board[y][x]);
                    }
                }
            }
            
            // 현재 블록 그리기
            if (currentPiece) {
                drawPiece(ctx, currentPiece);
            }
        }

        // 블록 그리기
        function drawPiece(ctx, piece) {
            for (let y = 0; y < piece.shape.length; y++) {
                for (let x = 0; x < piece.shape[y].length; x++) {
                    if (piece.shape[y][x]) {
                        drawBlock(ctx, piece.x + x, piece.y + y, piece.color);
                    }
                }
            }
        }

        // 다음 블록 그리기
        function drawNextPiece() {
            nextCtx.clearRect(0, 0, nextCanvas.width, nextCanvas.height);
            if (nextPiece) {
                const offsetX = (nextCanvas.width - nextPiece.shape[0].length * 20) / 2;
                const offsetY = (nextCanvas.height - nextPiece.shape.length * 20) / 2;
                
                for (let y = 0; y < nextPiece.shape.length; y++) {
                    for (let x = 0; x < nextPiece.shape[y].length; x++) {
                        if (nextPiece.shape[y][x]) {
                            nextCtx.fillStyle = nextPiece.color;
                            nextCtx.fillRect(offsetX + x * 20, offsetY + y * 20, 20, 20);
                            nextCtx.strokeStyle = '#333';
                            nextCtx.strokeRect(offsetX + x * 20, offsetY + y * 20, 20, 20);
                        }
                    }
                }
            }
        }

        // 충돌 검사
        function isValidMove(piece, dx, dy, rotation) {
            const newX = piece.x + dx;
            const newY = piece.y + dy;
            const shape = rotation || piece.shape;
            
            for (let y = 0; y < shape.length; y++) {
                for (let x = 0; x < shape[y].length; x++) {
                    if (shape[y][x]) {
                        const nx = newX + x;
                        const ny = newY + y;
                        
                        if (nx < 0 || nx >= BOARD_WIDTH || ny >= BOARD_HEIGHT) {
                            return false;
                        }
                        if (ny >= 0 && board[ny][nx]) {
                            return false;
                        }
                    }
                }
            }
            return true;
        }

        // 블록 회전
        function rotatePiece(piece) {
            const rotated = [];
            for (let i = 0; i < piece.shape[0].length; i++) {
                rotated[i] = [];
                for (let j = piece.shape.length - 1; j >= 0; j--) {
                    rotated[i][piece.shape.length - 1 - j] = piece.shape[j][i];
                }
            }
            return rotated;
        }

        // 블록 고정
        function placePiece() {
            for (let y = 0; y < currentPiece.shape.length; y++) {
                for (let x = 0; x < currentPiece.shape[y].length; x++) {
                    if (currentPiece.shape[y][x]) {
                        const ny = currentPiece.y + y;
                        const nx = currentPiece.x + x;
                        if (ny >= 0) {
                            board[ny][nx] = currentPiece.color;
                        }
                    }
                }
            }
        }

        // 라인 클리어
        function clearLines() {
            let linesCleared = 0;
            for (let y = BOARD_HEIGHT - 1; y >= 0; y--) {
                if (board[y].every(cell => cell !== 0)) {
                    board.splice(y, 1);
                    board.unshift(new Array(BOARD_WIDTH).fill(0));
                    linesCleared++;
                    y++; // 같은 라인 다시 체크
                }
            }
            
            if (linesCleared > 0) {
                lines += linesCleared;
                score += linesCleared * 100 * level;
                level = Math.floor(lines / 10) + 1;
                dropInterval = Math.max(50, 1000 - (level - 1) * 100);
                updateUI();
            }
        }

        // UI 업데이트
        function updateUI() {
            document.getElementById('score').textContent = score;
            document.getElementById('level').textContent = level;
            document.getElementById('lines').textContent = lines;
        }

        // 게임 오버 체크
        function checkGameOver() {
            return !isValidMove(currentPiece, 0, 0);
        }

        // 게임 오버
        function gameOver() {
            gameRunning = false;
            document.getElementById('finalScore').textContent = score;
            document.getElementById('gameOver').style.display = 'block';
        }

        // 게임 재시작
        function restartGame() {
            initBoard();
            currentPiece = createPiece();
            nextPiece = createPiece();
            score = 0;
            level = 1;
            lines = 0;
            gameRunning = true;
            isPaused = false;
            dropTime = 0;
            dropInterval = 1000;
            document.getElementById('gameOver').style.display = 'none';
            document.getElementById('pauseOverlay').style.display = 'none';
            updateUI();
            gameLoop();
        }

        // 키보드 입력 처리
        document.addEventListener('keydown', (e) => {
            if (!gameRunning || isPaused) {
                if (e.key === 'p' || e.key === 'P') {
                    togglePause();
                }
                return;
            }
            
            switch (e.key) {
                case 'ArrowLeft':
                    if (isValidMove(currentPiece, -1, 0)) {
                        currentPiece.x--;
                    }
                    break;
                case 'ArrowRight':
                    if (isValidMove(currentPiece, 1, 0)) {
                        currentPiece.x++;
                    }
                    break;
                case 'ArrowDown':
                    if (isValidMove(currentPiece, 0, 1)) {
                        currentPiece.y++;
                        score++;
                        updateUI();
                    }
                    break;
                case 'ArrowUp':
                    const rotated = rotatePiece(currentPiece);
                    if (isValidMove(currentPiece, 0, 0, rotated)) {
                        currentPiece.shape = rotated;
                    }
                    break;
                case ' ':
                    while (isValidMove(currentPiece, 0, 1)) {
                        currentPiece.y++;
                        score += 2;
                    }
                    updateUI();
                    break;
                case 'p':
                case 'P':
                    togglePause();
                    break;
            }
        });

        // 일시정지 토글
        function togglePause() {
            isPaused = !isPaused;
            document.getElementById('pauseOverlay').style.display = isPaused ? 'flex' : 'none';
        }

        // 게임 루프
        function gameLoop() {
            if (!gameRunning) return;
            
            if (!isPaused) {
                dropTime += 16;
                if (dropTime >= dropInterval) {
                    if (isValidMove(currentPiece, 0, 1)) {
                        currentPiece.y++;
                    } else {
                        placePiece();
                        clearLines();
                        currentPiece = nextPiece;
                        nextPiece = createPiece();
                        
                        if (checkGameOver()) {
                            gameOver();
                            return;
                        }
                    }
                    dropTime = 0;
                }
                
                drawBoard();
                drawNextPiece();
            }
            
            requestAnimationFrame(gameLoop);
        }

        // 게임 초기화 및 시작
        function initGame() {
            initBoard();
            currentPiece = createPiece();
            nextPiece = createPiece();
            updateUI();
            gameLoop();
        }

        // 게임 시작
        initGame();
    </script>
</body>
</html>
